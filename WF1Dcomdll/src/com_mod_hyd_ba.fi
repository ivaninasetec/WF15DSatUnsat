	!********************************************************************************************************************
	!*                                                                                                                  *
	!*                                 MODULE: MOD_UNSAT_HYDRAULICFUN_BA                                                *
	!*                                                                                                                  *
	!********************************************************************************************************************
	!* THIS MODULE INCLUDE VARIABLY SATURATED HYDRAULIC FUNCTIONS FOR THE BALLAST AS IN CHAPTER 4 OF THE THESIS         *
	!*    f_hyd_S_h_BA:   Returns the specific saturation from pressure head                                            *
	!*    f_hyd_th_h_BA:  Returns water content from pressure head                                                      *
	!*    f_hyd_kr_h_BA:  Returns relative permeability from pressure head                                              *
	!*    f_hyd_k_h_BA:   Returns permeability from pressure head                                                       *
	!*    f_hyd_cap_h_BA: Returns water capacity from pressure head                                                     *
	!*                                                                                                                  *
	!*    Iván Campos-Guereta Díez                                                                                      *
	!*    MSc Civil Engineering by Polytechnic University of Madrid                                                     *
	!*    PhD Student by University of Nottingham                                                                       *
	!*    eMBA by International Institute San Telmo in Seville                                                          *
	!*    ivan.camposguereta@nottingham.ac.uk                                                                           *
	!*                                                                                                                  *
	!*    This software is copyrighted 2019(C)                                                                          *
	!********************************************************************************************************************

	!module com_mod_hyd_ba
 !
	!implicit none
	!private
	!include 'inc_precision.fi'
 !
	!! !********************************************************************************************************************
	!! ! POLIMORPHIC INTERFACES FOR THE FOLLOWING HYDRAULIC FUNCIONS
	!! !--------------------------------------------------------------------------------------------------------------------
	!! ! f_hyd_S_h_Ba	:Returns Equivalent saturation (sca or vec) from pressure head (sca or vec)
	!! ! f_hyd_th_h_Ba	:Returns water content (sca or vec)					from pressure head (sca or vec)
	!! ! f_hyd_kr_h_Ba	:Returns relative permeability (sca or vec) from pressure head (sca or vec)
	!! ! f_hyd_k_h_Ba	:Returns permeability (sca or vec)					from pressure head (sca or vec)
	!! ! f_hyd_cap_h_Ba:Returns water capacity (sca or vec)				from pressure head (sca or vec)
	!! !********************************************************************************************************************
	!!
	!! interface f_hyd_s_h_ba
	!! module procedure f_hyd_s_h_ba_sca
	!! module procedure f_hyd_s_h_ba_vec
	!! module procedure f_hyd_s_h_ba_vec2
	!! end interface f_hyd_s_h_ba
	!!
	!! interface f_hyd_th_h_ba
	!! module procedure f_hyd_th_h_ba_sca
	!! module procedure f_hyd_th_h_ba_vec
	!!module procedure f_hyd_th_h_ba_vec2
	!! end interface f_hyd_th_h_ba
	!!
	!! interface f_hyd_kr_h_ba
	!! module procedure f_hyd_kr_h_ba_sca
	!! module procedure f_hyd_kr_h_ba_vec
	!!module procedure f_hyd_kr_h_ba_vec2
	!! end interface f_hyd_kr_h_ba
	!!
	!! interface f_hyd_k_h_ba
	!! module procedure f_hyd_k_h_ba_sca
	!! module procedure f_hyd_k_h_ba_vec
	!!module procedure f_hyd_k_h_ba_vec2
	!! end interface f_hyd_k_h_ba
	!!
	!! interface f_hyd_cap_h_ba
	!! module procedure f_hyd_cap_h_ba_sca
	!! module procedure f_hyd_cap_h_ba_vec
	!!module procedure f_hyd_cap_h_ba_vec2
	!!end interface f_hyd_cap_h_ba
	!!
	!! interface f_hyd_dkr_h_ba
	!! module procedure f_hyd_dkr_h_ba_sca
	!! module procedure f_hyd_dkr_h_ba_vec
	!!module procedure f_hyd_dkr_h_ba_vec2
	!!end interface f_hyd_dkr_h_ba
	!!
	!!interface f_hyd_dk_h_ba
	!! module procedure f_hyd_dk_h_ba_sca
	!! module procedure f_hyd_dk_h_ba_vec
	!!module procedure f_hyd_dk_h_ba_vec2
	!! end interface f_hyd_dk_h_ba
	!!
	!! public::f_hyd_s_h_ba,   f_hyd_th_h_ba,  f_hyd_kr_h_ba,  f_hyd_k_h_ba,  f_hyd_cap_h_ba,  f_hyd_dkr_h_ba,  f_hyd_dk_h_ba, f_hyd_s0_h_ba_sca, f_hyd_incs_h1_to_h2_ba_sca
 !
	!PUBLIC::  f_hyd_S_h_ba_sca,  f_hyd_S_h_ba_vec,  f_hyd_S_h_ba_vec2, &
	!	f_hyd_th_h_ba_sca, f_hyd_th_h_ba_vec, f_hyd_th_h_ba_vec2,  &
	!	f_hyd_kr_h_ba_sca, f_hyd_kr_h_ba_vec, f_hyd_kr_h_ba_vec2, &
	!	f_hyd_k_h_ba_sca,  f_hyd_k_h_ba_vec,  f_hyd_k_h_ba_vec2,  &
	!	f_hyd_cap_h_ba_sca,f_hyd_cap_h_ba_vec,f_hyd_cap_h_ba_vec2, &
	!	f_hyd_dkr_h_ba_sca,f_hyd_dkr_h_ba_vec,f_hyd_dkr_h_ba_vec2, &
	!	f_hyd_dk_h_ba_sca, f_hyd_dk_h_ba_vec, f_hyd_dk_h_ba_vec2, &
	!	f_hyd_incs_h1_to_h2_ba_sca
 !
 !
 !
	!contains
 !
 !
	!!********************************************************************************************************************
	!! F: f_hyd_S_H_PW_SCA(material,h)
	!!--------------------------------------------------------------------------------------------------------------------
	!! Function that returns specific saturation (scalar) from pressure head (scalar pressure), with simplified power
	!! function:
	!!		Se=(1+(-a·h))^n)^(-m) for h<0 | Se=1 for h>=0
	!!********************************************************************************************************************

	pure function f_hyd_s_h_ba_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_ba_sca" :: f_hyd_s_h_ba_sca
	!DEC$ endif

	!return the specific saturation from pressure head(scalar)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	if (h<-material%a) then
		rout = (h/(-material%a))**(-material%n)
	else
		rout =  1.0_dps
	end if

	end function f_hyd_s_h_ba_sca

	!********************************************************************************************************************
	! F: f_hyd_incs_h1_to_h2_ba_sca(material,h1,h2)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns the increment of saturation between the watertable height h1 and h2
	! function:
	!		Se=(1+(-a·h))^n)^(-m) for h<0 | Se=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_incs_h1_to_h2_ba_sca(material,h1,h2)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_incs_h1_to_h2_ba_sca" :: f_hyd_incs_h1_to_h2_ba_sca
	!DEC$ endif

	!CHECK:IMPORTANT: In this case the increment S is not between h1 and h2 but between h1+psi_b and h2+psi_b, as the watertable in reality begin in psi_b (material%a)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h1,h2
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::f_hyd_incs_h1_to_h2_ba_sca
	real(kind=16)::a,hb1,hb2,n,m,rout,rout1,rout2

	a = real(material%a,16)
	!CHECK:In this case we want to integrate between h1+psib and h2+psib
	hb1 = real(h1,16)+material%a
	hb2 = real(h2,16)+material%a
	!hb1 = real(h1,16)
	!hb2 = real(h2,16)
	n= real(material%n,16)
	m= real(material%m,16)

	!Saturation S1 is the integral from 0 to hb1 of S
	if (hb1<-material%a) then
		rout1 = (hb1/(-material%a))**(-material%n) !CHECK: 
	else
		rout1 =  1.0_16
	end if

	if (hb2<-material%a) then
		rout2 = (hb2/(-material%a))**(-material%n)
	else
		rout2 =  1.0_16
	end if

	rout = 0.5_dpd*(rout2-rout1)
	!rout = rout2-rout1

	f_hyd_incs_h1_to_h2_ba_sca = real(rout,dpd)

	end function f_hyd_incs_h1_to_h2_ba_sca


	!********************************************************************************************************************
	! F: f_hyd_S_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns specific saturation (vector) from pressure head (vector pressure), with Van Genuchten
	!	expressions:
	!		Se=(1+(-a·h))^n)^(-m) for h<0 | Se=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_s_h_ba_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_ba_vec" :: f_hyd_s_h_ba_vec
	!DEC$ endif

	!return the specific saturation from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dpd),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<-material%a)
		rout = (h/(-material%a))**(-material%n)
	elsewhere
		rout =  1.0_dps
	end where withsuction

	end function f_hyd_s_h_ba_vec

	!-------

	pure function f_hyd_s_h_ba_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_ba_vec2" :: f_hyd_s_h_ba_vec2
	!DEC$ endif

	!return the specific saturation from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<-material%a)
		rout = (h/(-material%a))**(-material%n)
	elsewhere
		rout =  1.0_dps
	end where withsuction

	end function f_hyd_s_h_ba_vec2

	!********************************************************************************************************************
	! F: f_hyd_th_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water content (scalar) from pressure head (vector pressure), with Van Genuchten
	! expressions:
	!		th = thres+(thsat-thres)*Se
	!********************************************************************************************************************

	pure function f_hyd_th_h_ba_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_ba_sca" :: f_hyd_th_h_ba_sca
	!DEC$ endif

	!returns the moisture content from pressure head(scalar)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_ba_sca(material,h)

	end function f_hyd_th_h_ba_sca


	!********************************************************************************************************************
	! F: f_hyd_th_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water content (scalar) from pressure head (vector pressure), with Van Genuchten
	! expressions:
	!		th = thres+(thsat-thres)*Se
	!********************************************************************************************************************

	pure function f_hyd_th_h_ba_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_ba_vec" :: f_hyd_th_h_ba_vec
	!DEC$ endif

	!returns the moisture content from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_ba_vec(material,h)

	end function f_hyd_th_h_ba_vec

	!------------

	pure function f_hyd_th_h_ba_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_ba_vec2" :: f_hyd_th_h_ba_vec2
	!DEC$ endif

	!returns the moisture content from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_ba_vec2(material,h)

	end function f_hyd_th_h_ba_vec2

	!********************************************************************************************************************
	! F: f_hyd_kr_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns relative permeability (scalar) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		kr= Se^l·(1-(1-Se^(1/m))^m)^2 | Kr=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_kr_h_ba_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_ba_sca" :: f_hyd_kr_h_ba_sca
	!DEC$ endif

	!returns relative permeability from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout,se

	if (h<-material%a) then
		se = f_hyd_s_h_ba_sca(material,h)
		rout = se**(2.0_dpd+material%l)
	else
		rout =  1.0_dpd
	end if


	end function f_hyd_kr_h_ba_sca


	!********************************************************************************************************************
	! F: f_hyd_kr_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns relative permeability (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		kr= Se^l·(1-(1-Se^(1/m))^m)^2 | Kr=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_kr_h_ba_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_ba_vec" :: f_hyd_kr_h_ba_vec
	!DEC$ endif

	!returns relative permeability from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h)),se(size(h))

	withsuction:where (h<-material%a)
		se = f_hyd_s_h_ba_vec(material,h)
		rout = se**(2.0_dpd+material%l)
	elsewhere
		rout =  1.0_dps
	end where withsuction

	end function f_hyd_kr_h_ba_vec

	!--------------

	pure function f_hyd_kr_h_ba_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_ba_vec2" :: f_hyd_kr_h_ba_vec2
	!DEC$ endif

	!returns relative permeability from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h)),se(size(h))

	withsuction:where (h<-material%a)
		se = f_hyd_s_h_ba_vec2(material,h)
		rout = se**(2.0_dpd+material%l)
	elsewhere
		rout =  1.0_dps
	end where withsuction

	end function f_hyd_kr_h_ba_vec2

	!********************************************************************************************************************
	! F: f_hyd_k_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns permeability (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		k= ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_k_h_ba_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_ba_sca" :: f_hyd_k_h_ba_sca
	!DEC$ endif

	!returns permeability from pressure head(scalar)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	rout = material%ksat*f_hyd_kr_h_ba_sca(material,h)

	end function f_hyd_k_h_ba_sca


	!********************************************************************************************************************
	! F: f_hyd_k_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns permeability (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		k= ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_k_h_ba_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_ba_vec" :: f_hyd_k_h_ba_vec
	!DEC$ endif

	!returns permeability from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	rout = material%ksat*f_hyd_kr_h_ba_vec(material,h)

	end function f_hyd_k_h_ba_vec

	!-----------

	pure function f_hyd_k_h_ba_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_ba_vec2" :: f_hyd_k_h_ba_vec2
	!DEC$ endif

	!returns permeability from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	rout = material%ksat*f_hyd_kr_h_ba_vec2(material,h)

	end function f_hyd_k_h_ba_vec2

	!********************************************************************************************************************
	! F: f_hyd_cap_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water capacity (scalar) from pressure head (scalar pressure), with
	!	Mualem-Van Genuchten expressions:
	!		Cap = -(thsat-thres)·m·n·(-a·h)^n·(1+(-h·a)^n)^(-1-m)/h (Problems when very near to saturation)
	!		Cap = -(thsat-thres)·m·n·a^n·(-h)^(n-1)·(1+(-h·a)^n)^(-1-m) (Avoid problems with n>1)
	!********************************************************************************************************************

	pure function f_hyd_cap_h_ba_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_ba_sca" :: f_hyd_cap_h_ba_sca
	!DEC$ endif

	!returns water capacity from pressure head(scalar)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	if (h<-material%a) then
		!need to check the sign of cap!!!!!!!!!!!!!!!!!!!!
		rout =((material%thres-material%thsat)*material%n*(h/(-material%a))**(-material%n))/h
	else
		rout =  0.0_dps
	end if


	end function f_hyd_cap_h_ba_sca


	!********************************************************************************************************************
	! F: f_hyd_cap_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water capacity (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		Cap = -(thsat-thres)·m·n·(-a·h)^n·(1+(-h·a)^n)^(-1-m)/h (Problems when very near to saturation)
	!		Cap = -(thsat-thres)·m·n·a^n·(-h)^(n-1)·(1+(-h·a)^n)^(-1-m) (Avoid problems with n>1)
	!********************************************************************************************************************

	pure function f_hyd_cap_h_ba_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_ba_vec" :: f_hyd_cap_h_ba_vec
	!DEC$ endif

	!returns water capacity from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<-material%a)
		!need to check the sign of cap!!!!!!!!!!!!!!!!!!!!
		rout = ((material%thres-material%thsat)*material%n*(h/(-material%a))**(-material%n))/h
	elsewhere
		rout =  0.0_dps
	end where withsuction

	end function f_hyd_cap_h_ba_vec

	!-------

	pure function f_hyd_cap_h_ba_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_ba_vec2" :: f_hyd_cap_h_ba_vec2
	!DEC$ endif

	!returns water capacity from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<-material%a)
		!need to check the sign of cap!!!!!!!!!!!!!!!!!!!!
		rout = ((material%thres-material%thsat)*material%n*(h/(-material%a))**(-material%n))/h
	elsewhere
		rout =  0.0_dps
	end where withsuction

	end function f_hyd_cap_h_ba_vec2

	!********************************************************************************************************************
	! F: f_hyd_dkrcap_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of relative permeability over h
	!	Mualem-Van Genuchten expressions:
	!		dkr/dh = m·n·x^[-1-(1+l)·m]·{l·x^m+(2+l-l·x)·y^(m-1)}·[1-(y/x)^m]·a^n·(-h)^(n-1)
	!   x= 1+(-a·h)^n
	!   y= x-1
	!********************************************************************************************************************

	pure function f_hyd_dkr_h_ba_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_ba_sca" :: f_hyd_dkr_h_ba_sca
	!DEC$ endif

	!returns water capacity from pressure head(scalar)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	if (h<-material%a) then
		
		!tex:
		!$k_{r}=-\frac{\lambda   (l+2) \left(\left(\frac{\psi }{\text{$\psi $b}}\right)^{-\lambda }\right)^{l+2}}{\psi }$
		rout = -(material%n * (2.0_dpd + material%l ) * ( (h/(-material%a))**(-material%n) )**( 2.0_dpd + material%l))/h
		
		!rout = -((2.0_dpd+(2.0_dpd+material%l)*material%n)*((h/(-material%a))**(-material%n))**(2.0_dpd+material%l+2.0_dpd/material%n))/h		
	else
		rout =  0.0_dps
	end if


	end function f_hyd_dkr_h_ba_sca

	!********************************************************************************************************************
	! F: f_hyd_dkrcap_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of relative permeability over h (vector)
	!	Mualem-Van Genuchten expressions:
	!		dkr/dh = m·n·x^[-1-(1+l)·m]·{l·x^m+(2+l-l·x)·y^(m-1)}·[1-(y/x)^m]·a^n·(-h)^(n-1)
	!   x= 1+(-a·h)^n
	!   y= x-1
	!********************************************************************************************************************

	pure function f_hyd_dkr_h_ba_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_ba_vec" :: f_hyd_dkr_h_ba_vec
	!DEC$ endif

	!returns water capacity from pressure head(scalar)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<-material%a)
		rout = -(material%n * (2.0_dpd + material%l ) * ( (h/(-material%a))**(-material%n) )**( 2.0_dpd + material%l))/h
		!rout = -((2.0_dpd+(2.0_dpd+material%l)*material%n)*((h/(-material%a))**(-material%n))**(2.0_dpd+material%l+2.0_dpd/material%n))/h
	elsewhere
		rout =  0.0_dps
	end where withsuction

	end function f_hyd_dkr_h_ba_vec

	!------------------

	pure function f_hyd_dkr_h_ba_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_ba_vec2" :: f_hyd_dkr_h_ba_vec2
	!DEC$ endif

	!returns water capacity from pressure head(scalar)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<-material%a)
		rout = -(material%n * (2.0_dpd + material%l ) * ( (h/(-material%a))**(-material%n) )**( 2.0_dpd + material%l))/h
		!rout = -((2.0_dpd+(2.0_dpd+material%l)*material%n)*((h/(-material%a))**(-material%n))**(2.0_dpd+material%l+2.0_dpd/material%n))/h
	elsewhere
		rout =  0.0_dps
	end where withsuction

	end function f_hyd_dkr_h_ba_vec2

	!********************************************************************************************************************
	! F: f_hyd_dk_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns permeability (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		k= ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_dk_h_ba_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_ba_sca" :: f_hyd_dk_h_ba_sca
	!DEC$ endif

	!returns permeability from pressure head(scalar)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	rout = material%ksat*f_hyd_dkr_h_ba_sca(material,h)

	end function f_hyd_dk_h_ba_sca


	!********************************************************************************************************************
	! F: f_hyd_dk_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of permeability (vector) respect h from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		k= ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_dk_h_ba_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_ba_vec" :: f_hyd_dk_h_ba_vec
	!DEC$ endif

	!returns permeability from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	rout = material%ksat*f_hyd_dkr_h_ba_vec(material,h)

	end function f_hyd_dk_h_ba_vec

	!-------------

	pure function f_hyd_dk_h_ba_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_ba_vec2" :: f_hyd_dk_h_ba_vec2
	!DEC$ endif

	!returns permeability from pressure head(vector)

	!use com_mod_ty_material,only:ty_com_material

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	rout = material%ksat*f_hyd_dkr_h_ba_vec2(material,h)

	end function f_hyd_dk_h_ba_vec2
	
	
		!********************************************************************************************************************
	! F: f_hyd_Cmax_ba(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Return the maximum value of the water capacity, to apply on the L-method
	!********************************************************************************************************************

	pure function f_hyd_Cmax_ba(material) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_Cmax_ba" :: f_hyd_Cmax_ba
	!DEC$ endif

	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout,lambda,psib,alpha,thetar,thetas
	lambda=material%n
	psib=-material%a
	thetar=material%thres
	thetas=material%thsat

	!tex:
	!$${C_{max}} = \frac{{\left( {\theta r - \theta s} \right)\lambda }}{{\psi b}}$$
	
	rout = ((thetar - thetas)*lambda)/psib

	end function f_hyd_Cmax_ba


	!end module com_mod_hyd_ba
	!********************************************************************************************************************
	! TITLE         : MOD_FUN_HYDRAULIC_BC: HYDRAULIC FUNCTIONS	USING VAN-GENUCHTEN AND MUALEM
	! PROJECT       : WF1DCOMDLL Library for common functions and derived types
	! MODULE        : -
	! URL           : https://github.com/ivaninasetec/WF15DSatUnsat
	! AFFILIATION   : The University of Nottingham
	! DATE          : 13/2/2022
	! REVISION      : 1.0
	! LICENSE       : This software is copyrighted 2022(C)
	!
	! DESCRIPTION:
	!> Hydraulic functions	using van-genuchten and mualem
	!>    f_hyd_S_h_vg:   Returns the specific saturation from pressure head                                            
	!>    f_hyd_th_h_vg:  Returns water content from pressure head                                                      
	!>    f_hyd_kr_h_vg:  Returns relative permeability from pressure head                                              
	!>    f_hyd_k_h_vg:   Returns permeability from pressure head                                                       
	!>    f_hyd_cap_h_vg: Returns water capacity from pressure head
	!>
	!> @author
	!> Iván Campos-Guereta Díez
	!> MSc Civil Engineering by <a href="http://www.upm.es/">Polytechnic University of Madrid</a>
	!> PhD Student by <a href="https://www.nottingham.ac.uk/">The university of Nottingham</a>
	!> eMBA by <a href="https://www.santelmo.org/en">San Telmo Bussiness School</a>
	!> ivan.camposguereta@nottingham.ac.uk
	!> Working partner of <a href="https://www.inasetec.es">INASETEC</a>
	!********************************************************************************************************************

	!********************************************************************************************************************
	! F: f_hyd_S_H_PW_SCA(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns specific saturation (scalar) from pressure head (scalar pressure), with simplified power
	! function:
	!		Se=(1+(-a·h))^n)^(-m) for h<0 | Se=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_s_h_vg_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_vg_sca" :: f_hyd_s_h_vg_sca
	!DEC$ endif

	!return the specific saturation from pressure head(scalar)

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	if (h<0.0_dps) then
		rout = (1.0_dps+(-material%a*h)**material%n)**(-material%m)
	else
		rout =  1.0_dps
	end if

	end function f_hyd_s_h_vg_sca

	!********************************************************************************************************************
	! F: f_hyd_S_H_PW_SCA(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns specific saturation (scalar) from pressure head (scalar pressure), with simplified power
	! function:
	!		Se=(1+(-a·h))^n)^(-m) for h<0 | Se=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_incs_h1_to_h2_vg_sca(material,h1,h2)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_incs_h1_to_h2_vg_sca" :: f_hyd_incs_h1_to_h2_vg_sca
	!DEC$ endif

	!return the specific saturation from pressure head(scalar)

	real(kind=dps),intent(in)::h1,h2
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::f_hyd_incs_h1_to_h2_vg_sca
	real(kind=dpd)::a,hb1,hb2,n,m,rout,rout1,rout2

	a = real(material%a,dpd)
	hb1 = real(h1,dpd)
	hb2 = real(h2,dpd)
	n= real(material%n,dpd)
	m= real(material%m,dpd)

	!In this case we are considering the value of saturation at hb1
	if (hb1<0.0_dpd) then
		rout1 = (1.0_dpd+(-a*hb1)**n)**(-m)
	else
		rout1 =  1.0_dpd
	end if

	if (hb2<0.0_dpd) then
		rout2 = (1.0_dpd+(-a*hb2)**n)**(-m)
	else
		rout2 =  1.0_dpd
	end if

	rout = rout2-rout1

	f_hyd_incs_h1_to_h2_vg_sca = real(rout,dpd)

	end function f_hyd_incs_h1_to_h2_vg_sca


	!********************************************************************************************************************
	! F: f_hyd_S_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns specific saturation (vector) from pressure head (vector pressure), with Van Genuchten
	!	expressions:
	!		Se=(1+(-a·h))^n)^(-m) for h<0 | Se=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_s_h_vg_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_vg_vec" :: f_hyd_s_h_vg_vec
	!DEC$ endif

	!return the specific saturation from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<0.0_dps)
		rout = (1.0_dps+(-material%a*h)**material%n)**(-material%m)
	elsewhere
		rout =  1.0_dps
	end where withsuction

	end function f_hyd_s_h_vg_vec

	!-------

	pure function f_hyd_s_h_vg_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_vg_vec2" :: f_hyd_s_h_vg_vec2
	!DEC$ endif

	!return the specific saturation from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<0.0_dps)
		rout = (1.0_dps+(-material%a*h)**material%n)**(-material%m)
	elsewhere
		rout =  1.0_dps
	end where withsuction

	end function f_hyd_s_h_vg_vec2

	!********************************************************************************************************************
	! F: f_hyd_th_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water content (scalar) from pressure head (vector pressure), with Van Genuchten
	! expressions:
	!		th = thres+(thsat-thres)*Se
	!********************************************************************************************************************

	pure function f_hyd_th_h_vg_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_vg_sca" :: f_hyd_th_h_vg_sca
	!DEC$ endif

	!returns the moisture content from pressure head(scalar)

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_vg_sca(material,h)

	end function f_hyd_th_h_vg_sca

	!********************************************************************************************************************
	! F: f_hyd_th_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water content (scalar) from pressure head (vector pressure), with Van Genuchten
	! expressions:
	!		th = thres+(thsat-thres)*Se
	!********************************************************************************************************************

	pure function f_hyd_th_h_vg_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_vg_vec" :: f_hyd_th_h_vg_vec
	!DEC$ endif

	!returns the moisture content from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_vg_vec(material,h)

	end function f_hyd_th_h_vg_vec

	!------------

	pure function f_hyd_th_h_vg_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_vg_vec2" :: f_hyd_th_h_vg_vec2
	!DEC$ endif

	!returns the moisture content from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_vg_vec2(material,h)

	end function f_hyd_th_h_vg_vec2

	!********************************************************************************************************************
	! F: f_hyd_kr_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns relative permeability (scalar) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		kr= Se^l·(1-(1-Se^(1/m))^m)^2 | Kr=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_kr_h_vg_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_vg_sca" :: f_hyd_kr_h_vg_sca
	!DEC$ endif

	!returns relative permeability from pressure head(vector)

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout,se

	if (h<0.0_dps) then
		se = f_hyd_s_h_vg_sca(material,h)
		rout = MAX(1.0E-10_dpd,min(1.0_dpd,(se**material%l)*(1.0_dpd-(1.0_dpd-se**(1.0_dpd/material%m))**material%m)**2))
	else
		rout =  1.0_dpd
	end if

	end function f_hyd_kr_h_vg_sca

	!********************************************************************************************************************
	! F: f_hyd_kr_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns relative permeability (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		kr= Se^l·(1-(1-Se^(1/m))^m)^2 | Kr=1 for h>=0
	!********************************************************************************************************************

	pure function f_hyd_kr_h_vg_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_vg_vec" :: f_hyd_kr_h_vg_vec
	!DEC$ endif

	!returns relative permeability from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h)),se(size(h))

	withsuction:where (h<0.0_dps)
		se = f_hyd_s_h_vg_vec(material,h)
		rout = MAX(1.0E-10_dpd,min(1.0_dpd,(se**material%l)*(1.0_dpd-(1.0_dpd-se**(1.0_dpd/material%m))**material%m)**2))
	elsewhere
		rout =  1.0_dps
	end where withsuction

	end function f_hyd_kr_h_vg_vec

	!--------------

	pure function f_hyd_kr_h_vg_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_vg_vec2" :: f_hyd_kr_h_vg_vec2
	!DEC$ endif

	!returns relative permeability from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h)),se(size(h))

	withsuction:where (h<0.0_dps)
		se = f_hyd_s_h_vg_vec2(material,h)
		rout = MAX(1.0E-10_dpd,min(1.0_dpd,(se**material%l)*(1.0_dpd-(1.0_dpd-se**(1.0_dpd/material%m))**material%m)**2))
	elsewhere
		rout =  1.0_dps
	end where withsuction

	end function f_hyd_kr_h_vg_vec2

	!********************************************************************************************************************
	! F: f_hyd_k_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns permeability (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		k= ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_k_h_vg_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_vg_sca" :: f_hyd_k_h_vg_sca
	!DEC$ endif

	!returns permeability from pressure head(scalar)

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	rout = material%ksat*f_hyd_kr_h_vg_sca(material,h)

	end function f_hyd_k_h_vg_sca

	!********************************************************************************************************************
	! F: f_hyd_k_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns permeability (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		k= ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_k_h_vg_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_vg_vec" :: f_hyd_k_h_vg_vec
	!DEC$ endif

	!returns permeability from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	rout = material%ksat*f_hyd_kr_h_vg_vec(material,h)

	end function f_hyd_k_h_vg_vec

	!-----------

	pure function f_hyd_k_h_vg_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_vg_vec2" :: f_hyd_k_h_vg_vec2
	!DEC$ endif

	!returns permeability from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	rout = material%ksat*f_hyd_kr_h_vg_vec2(material,h)

	end function f_hyd_k_h_vg_vec2

	!********************************************************************************************************************
	! F: f_hyd_cap_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water capacity (scalar) from pressure head (scalar pressure), with
	!	Mualem-Van Genuchten expressions:
	!		Cap = -(thsat-thres)·m·n·(-a·h)^n·(1+(-h·a)^n)^(-1-m)/h (Problems when very near to saturation)
	!		Cap = -(thsat-thres)·m·n·a^n·(-h)^(n-1)·(1+(-h·a)^n)^(-1-m) (Avoid problems with n>1)
	!********************************************************************************************************************

	pure function f_hyd_cap_h_vg_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_vg_sca" :: f_hyd_cap_h_vg_sca
	!DEC$ endif

	!returns water capacity from pressure head(scalar)

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	if (h<0.0_dps) then
		rout = MAX(0.0_dpd,(material%thsat-material%thres)*material%m*material%n*(material%a**material%n)*(-h)**(material%n-1)&
			&*(1.0_dpd+(-material%a*h)**material%n)**(-1.0_dpd-material%m))
	else
		rout =  0.0_dps
	end if


	end function f_hyd_cap_h_vg_sca


	!********************************************************************************************************************
	! F: f_hyd_cap_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water capacity (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		Cap = -(thsat-thres)·m·n·(-a·h)^n·(1+(-h·a)^n)^(-1-m)/h (Problems when very near to saturation)
	!		Cap = -(thsat-thres)·m·n·a^n·(-h)^(n-1)·(1+(-h·a)^n)^(-1-m) (Avoid problems with n>1)
	!********************************************************************************************************************

	pure function f_hyd_cap_h_vg_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_vg_vec" :: f_hyd_cap_h_vg_vec
	!DEC$ endif

	!returns water capacity from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<0.0_dps)
		rout = max(0.0_dpd, (material%thsat-material%thres)*material%m*material%n*(material%a**material%n)*(-h)**(material%n-1)&
			&*(1.0_dpd+(-material%a*h)**material%n)**(-1.0_dpd-material%m))
	elsewhere
		rout =  0.0_dps
	end where withsuction

	end function f_hyd_cap_h_vg_vec

	!-------

	pure function f_hyd_cap_h_vg_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_vg_vec2" :: f_hyd_cap_h_vg_vec2
	!DEC$ endif

	!returns water capacity from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	withsuction:where (h<0.0_dps)
		rout = max(0.0_dpd,(material%thsat-material%thres)*material%m*material%n*(material%a**material%n)*(-h)**(material%n-1)&
			&*(1.0_dpd+(-material%a*h)**material%n)**(-1.0_dpd-material%m))
	elsewhere
		rout =  0.0_dps
	end where withsuction

	end function f_hyd_cap_h_vg_vec2

	!********************************************************************************************************************
	! F: f_hyd_dkrcap_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of relative permeability over h
	!	Mualem-Van Genuchten expressions:
	!		dkr/dh = m·n·x^[-1-(1+l)·m]·{l·x^m+(2+l-l·x)·y^(m-1)}·[1-(y/x)^m]·a^n·(-h)^(n-1)
	!   x= 1+(-a·h)^n
	!   y= x-1
	!********************************************************************************************************************

	pure function f_hyd_dkr_h_vg_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_vg_sca" :: f_hyd_dkr_h_vg_sca
	!DEC$ endif

	!returns water capacity from pressure head(scalar)

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout,x,y

	if (h<0.0_dps) then
		x = 1.0_dpd+(-material%a*h)**material%n
		y = x-1.0_dpd
		rout = material%m*material%n*x**(-1.0_dpd-(1+material%l)*material%m)*(material%l*x**material%m+(2.0_dpd+material%l-material%l*x)*&
			&    y**(material%m-1.0_dpd))*(1.0_dpd-(y/x)**material%m)*material%a**material%n*(-h)**(material%n-1)
	else
		rout =  0.0_dps
	end if

	end function f_hyd_dkr_h_vg_sca

	!********************************************************************************************************************
	! F: f_hyd_dkrcap_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of relative permeability over h (vector)
	!	Mualem-Van Genuchten expressions:
	!		dkr/dh = m·n·x^[-1-(1+l)·m]·{l·x^m+(2+l-l·x)·y^(m-1)}·[1-(y/x)^m]·a^n·(-h)^(n-1)
	!   x= 1+(-a·h)^n
	!   y= x-1
	!********************************************************************************************************************

	pure function f_hyd_dkr_h_vg_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_vg_vec" :: f_hyd_dkr_h_vg_vec
	!DEC$ endif

	!returns water capacity from pressure head(scalar)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h)),x(size(h)),y(size(h))

	withsuction:where (h<0.0_dps)
		x = 1+(-material%a*h)**material%n
		y = x-1
		rout = material%m*material%n*x**(-1-(1+material%l)*material%m)*(material%l*x**material%m+(2+material%l-material%l*x)*&
			&    y**(material%m-1))*(1-(y/x)**material%m)*material%a**material%n*(-h)**(material%n-1)
	elsewhere
		rout =  0.0_dps
	end where withsuction

	end function f_hyd_dkr_h_vg_vec

	!------------------

	pure function f_hyd_dkr_h_vg_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_vg_vec2" :: f_hyd_dkr_h_vg_vec2
	!DEC$ endif

	!returns water capacity from pressure head(scalar)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h)),x(size(h)),y(size(h))

	withsuction:where (h<0.0_dps)
		x = 1+(-material%a*h)**material%n
		y = x-1
		rout = material%m*material%n*x**(-1-(1+material%l)*material%m)*(material%l*x**material%m+(2+material%l-material%l*x)*&
			&    y**(material%m-1))*(1-(y/x)**material%m)*material%a**material%n*(-h)**(material%n-1)
	elsewhere
		rout =  0.0_dps
	end where withsuction

	end function f_hyd_dkr_h_vg_vec2

	!********************************************************************************************************************
	! F: f_hyd_dk_h_VG_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns permeability (vector) from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		k= ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_dk_h_vg_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_vg_sca" :: f_hyd_dk_h_vg_sca
	!DEC$ endif

	!returns permeability from pressure head(scalar)

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout

	rout = material%ksat*f_hyd_dkr_h_vg_sca(material,h)

	end function f_hyd_dk_h_vg_sca


	!********************************************************************************************************************
	! F: f_hyd_dk_h_VG_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of permeability (vector) respect h from pressure head (vector pressure), with
	!	Mualem-Van Genuchten expressions:
	!		k= ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_dk_h_vg_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_vg_vec" :: f_hyd_dk_h_vg_vec
	!DEC$ endif

	!returns permeability from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dpd)::rout(size(h))

	rout = material%ksat*f_hyd_dkr_h_vg_vec(material,h)

	end function f_hyd_dk_h_vg_vec

	!-------------

	pure function f_hyd_dk_h_vg_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_vg_vec2" :: f_hyd_dk_h_vg_vec2
	!DEC$ endif

	!returns permeability from pressure head(vector)

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout(size(h))

	rout = material%ksat*f_hyd_dkr_h_vg_vec2(material,h)

	end function f_hyd_dk_h_vg_vec2

	
	!********************************************************************************************************************
	! F: f_hyd_Cmax_vg(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Return the maximum value of the water capacity, to apply on the L-method
	!********************************************************************************************************************

	pure function f_hyd_Cmax_vg(material) result(rout)

	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout,m,n,alpha,thetar,thetas
	m=material%m
	n=material%n
	alpha=material%a
	thetar=material%thres
	thetas=material%thsat

	!tex:$ C_{max}=-m {\left( { - 1 + n} \right)^{\frac{{ - 1 + n}}{n}}}n{\left( {\left( {1 + m} \right)n} \right)^{ - 1 - m}}{\left( {1 + mn} \right)^{m + \frac{1}{n}}}\alpha \left( {\theta r - \theta s} \right)$
	
	rout =-m*(n-1.0_dpd)**((n-1.0_dpd)/n)*n*((1.0_dpd+m)*n)**(-1.0_dpd-m)*(1.0_dpd + m*n)**( m + 1.0_dpd/n)*alpha*(thetar-thetas)

	end function f_hyd_Cmax_vg

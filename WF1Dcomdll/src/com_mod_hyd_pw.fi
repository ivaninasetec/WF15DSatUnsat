	!********************************************************************************************************************
	! TITLE         : MOD_FUN_HYDRAULIC_PW: HYDRAULIC FUNCTIONS MATCHING PAPER BY HAYEK, 2016 FOR VALIDATION PURPOSES
	! PROJECT       : WF1DCOMDLL Library for common functions and derived types
	! MODULE        : -
	! URL           : https://github.com/ivaninasetec/WF15DSatUnsat
	! AFFILIATION   : The University of Nottingham
	! DATE          : 13/2/2022
	! REVISION      : 1.0
	! LICENSE       : This software is copyrighted 2022(C)
	!
	! DESCRIPTION:
	!> Hydraulic functions matching paper by Hayek, 2016 for validation purposes
	!>
	!> @author
	!> Iván Campos-Guereta Díez
	!> MSc Civil Engineering by <a href="http://www.upm.es/">Polytechnic University of Madrid</a>
	!> PhD Student by <a href="https://www.nottingham.ac.uk/">The university of Nottingham</a>
	!> eMBA by <a href="https://www.santelmo.org/en">San Telmo Bussiness School</a>
	!> ivan.camposguereta@nottingham.ac.uk
	!> Working partner of <a href="https://www.inasetec.es">INASETEC</a>
	!********************************************************************************************************************

	!********************************************************************************************************************
	! F: f_hyd_S_H_PW_SCA(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns specific saturation (scalar) from pressure head (scalar pressure), with simplified power
	! function:
	!		Se=EXP(a*h/n)
	!********************************************************************************************************************

	pure function f_hyd_s_h_pw_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_pw_sca" :: f_hyd_s_h_pw_sca
	!DEC$ endif

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout

	if (h<0.0) then
		rout = merge(exp(material%a*h/material%n),1.0_dps,h<0.0_dps)
	else
		rout = 1.0_dps
	end if

	end function f_hyd_s_h_pw_sca

	!********************************************************************************************************************
	! F: f_hyd_incs_h1_to_h2_vg_sca(H1,H2,MATERIAL)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns specific saturation (scalar) from pressure head (scalar pressure), with simplified power
	! function:
	!		Se1=EXP(a*h1/n) Se2=EXP(a*h2/n) -> Out Se2-Se1
	!********************************************************************************************************************

	pure function f_hyd_incs_h1_to_h2_pw_sca(material,h1,h2)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_incs_h1_to_h2_pw_sca" :: f_hyd_incs_h1_to_h2_pw_sca
	!DEC$ endif

	!return the specific saturation from pressure head(scalar)

	real(kind=dps),intent(in)::h1,h2
	type(ty_com_material),intent(in)::material
	real(kind=dpd)::f_hyd_incs_h1_to_h2_pw_sca
	real(kind=16)::a,hb1,hb2,n,m,rout,rout1,rout2

	a = real(material%a,16)
	hb1 = real(h1,16)
	hb2 = real(h2,16)
	n= real(material%n,16)
	m= real(material%m,16)

	if (hb1<0.0_16) then
		rout1 = merge(exp(material%a*h1/material%n),1.0_dps,h1<0.0_dps)
	else
		rout1 =  1.0_16
	end if

	if (hb2<0.0_16) then
		rout2 = merge(exp(material%a*h2/material%n),1.0_dps,h2<0.0_dps)
	else
		rout2 =  1.0_16
	end if

	rout = rout2-rout1

	f_hyd_incs_h1_to_h2_pw_sca = real(rout,dpd)

	end function f_hyd_incs_h1_to_h2_pw_sca


	!********************************************************************************************************************
	! F: f_hyd_S_H_PW_VEC(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns specific saturation (vector) from pressure head (vector pressure), with simplified power
	! function:
	!		Se=EXP(a*h/n)
	!********************************************************************************************************************

	pure function f_hyd_s_h_pw_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_pw_vec" :: f_hyd_s_h_pw_vec
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = merge(exp(material%a*h/material%n),1.0_dps,h<0.0_dps)
	else where
		rout = 1.0_dps
	end where

	end function f_hyd_s_h_pw_vec

	!-----------------

	pure function f_hyd_s_h_pw_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_s_h_pw_vec2" :: f_hyd_s_h_pw_vec2
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = merge(exp(material%a*h/material%n),1.0_dps,h<0.0_dps)
	else where
		rout = 1.0_dps
	end where

	end function f_hyd_s_h_pw_vec2


	!********************************************************************************************************************
	!	F: f_hyd_th_h_PW_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water content (scalar) from pressure head (scalar pressure), with simplified power
	! function:
	!		th = thres+(thsat-thres)*Se
	!********************************************************************************************************************

	pure function f_hyd_th_h_pw_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_pw_sca" :: f_hyd_th_h_pw_sca
	!DEC$ endif

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout

	if (h<0.0) then
		rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_pw_sca(material,h)
	else
		rout = material%thsat
	end if

	end function f_hyd_th_h_pw_sca


	!********************************************************************************************************************
	!	F: f_hyd_th_h_PW_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water content (vector) from pressure head (vector pressure), with simplified power
	! function:
	!		th = thres+(thsat-thres)*Se
	!********************************************************************************************************************

	pure function f_hyd_th_h_pw_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_pw_vec" :: f_hyd_th_h_pw_vec
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_pw_vec(material,h)
	else where
		rout = material%thsat
	end where

	end function f_hyd_th_h_pw_vec

	!---------

	pure function f_hyd_th_h_pw_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_th_h_pw_vec2" :: f_hyd_th_h_pw_vec2
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout(size(h))

	rout = material%thres+(material%thsat-material%thres)*f_hyd_s_h_pw_vec2(material,h)

	end function f_hyd_th_h_pw_vec2

	!********************************************************************************************************************
	!	F: f_hyd_kr_h_PW_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns relative permeability (scalar) from pressure head (scalar pressure), with simplified power
	! function:
	!		Kr = EXP(a·h)
	!********************************************************************************************************************

	pure function f_hyd_kr_h_pw_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_pw_sca" :: f_hyd_kr_h_pw_sca
	!DEC$ endif

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout

	if (h<0.0) then
		rout = exp(material%a*h)
	else
		rout = 1.0_dps
	end if

	end function f_hyd_kr_h_pw_sca


	!********************************************************************************************************************
	!	F: f_hyd_kr_h_PW_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns relative permeability (vector) from pressure head (vector pressure), with simplified power
	! function:
	!		Kr = EXP(a·h)
	!********************************************************************************************************************

	pure function f_hyd_kr_h_pw_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_pw_vec" :: f_hyd_kr_h_pw_vec
	!DEC$ endif

	!kr = exp(a·h)
	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = exp(material%a*h)
	else where
		rout = 1.0_dps
	end where

	end function f_hyd_kr_h_pw_vec

	!--------

	pure function f_hyd_kr_h_pw_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_kr_h_pw_vec2" :: f_hyd_kr_h_pw_vec2
	!DEC$ endif

	!kr = exp(a·h)
	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = exp(material%a*h)
	else where
		rout = 1.0_dps
	end where

	end function f_hyd_kr_h_pw_vec2

	!********************************************************************************************************************
	!	F: f_hyd_k_h_PW_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns permeability (scalar) from pressure head (scalar pressure), with simplified power
	! function:
	!		k = ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_k_h_pw_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_pw_sca" :: f_hyd_k_h_pw_sca
	!DEC$ endif

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout

	rout = material%ksat*f_hyd_kr_h_pw_sca(material,h)

	end function f_hyd_k_h_pw_sca

	!********************************************************************************************************************
	!	F: f_hyd_k_h_PW_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns permeability (vector) from pressure head (vector pressure), with simplified power
	! function:
	!		k = ksat·kr
	!********************************************************************************************************************

	pure function f_hyd_k_h_pw_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_pw_vec" :: f_hyd_k_h_pw_vec
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dps)::rout(size(h))

	rout = material%ksat*f_hyd_kr_h_pw_vec(material,h)

	end function f_hyd_k_h_pw_vec

	!---------

	pure function f_hyd_k_h_pw_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_k_h_pw_vec2" :: f_hyd_k_h_pw_vec2
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout(size(h))

	rout = material%ksat*f_hyd_kr_h_pw_vec2(material,h)

	end function f_hyd_k_h_pw_vec2

	!********************************************************************************************************************
	!	F: f_hyd_cap_h_PW_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water capacity (dth/dh) (scalar) from pressure head (scalar pressure), with simplified power
	! function:
	!		Cap=(thsat-thres)·(a/n)*EXP(a·h/n)
	!********************************************************************************************************************

	pure function f_hyd_cap_h_pw_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_pw_sca" :: f_hyd_cap_h_pw_sca
	!DEC$ endif

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout

	if (h<0.0) then
		rout = (material%thsat-material%thres)*(material%a/material%n)*exp(material%a*h/material%n)
	else
		rout = (material%thsat-material%thres)*(material%a/material%n)
	end if

	end function f_hyd_cap_h_pw_sca

	!********************************************************************************************************************
	!	F: f_hyd_cap_h_PW_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns water capacity (dth/dh) (vector) from pressure head (vector pressure), with simplified power
	! function:
	!		Cap=(thsat-thres)·(a/n)*EXP(a·h/n)
	!********************************************************************************************************************

	pure function f_hyd_cap_h_pw_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_pw_vec" :: f_hyd_cap_h_pw_vec
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = (material%thsat-material%thres)*(material%a/material%n)*exp(material%a*h/material%n)
	else where
		rout = (material%thsat-material%thres)*(material%a/material%n)
	end where

	end function f_hyd_cap_h_pw_vec

	!------

	pure function f_hyd_cap_h_pw_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_cap_h_pw_vec2" :: f_hyd_cap_h_pw_vec2
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = (material%thsat-material%thres)*(material%a/material%n)*exp(material%a*h/material%n)
	else where
		rout = (material%thsat-material%thres)*(material%a/material%n)
	end where

	end function f_hyd_cap_h_pw_vec2

	!********************************************************************************************************************
	!	F: f_hyd_dkr_h_PW_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of relative permeability (scalar) over pressure head (scalar pressure)
	! with simplified power function:
	!		dKr/dh = a·EXP(a·h)
	!********************************************************************************************************************

	pure function f_hyd_dkr_h_pw_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_pw_sca" :: f_hyd_dkr_h_pw_sca
	!DEC$ endif

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout

	if (h<0.0) then
		rout = material%a*exp(material%a*h)
	else
		rout = 1.0_dps
	end if

	end function f_hyd_dkr_h_pw_sca

	!********************************************************************************************************************
	!	F: f_hyd_dkr_h_PW_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of relative permeability (vector) over pressure head (vector pressure)
	! with simplified power function:
	!		dKr/dh = a·EXP(a·h)
	!********************************************************************************************************************

	pure function f_hyd_dkr_h_pw_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_pw_vec" :: f_hyd_dkr_h_pw_vec
	!DEC$ endif

	!kr = exp(a·h)
	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = material%a*exp(material%a*h)
	else where
		rout = 1.0_dps
	end where

	end function f_hyd_dkr_h_pw_vec

	!-------------------

	pure function f_hyd_dkr_h_pw_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dkr_h_pw_vec2" :: f_hyd_dkr_h_pw_vec2
	!DEC$ endif

	!kr = exp(a·h)
	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout(size(h))

	where (h<0.0)
		rout = material%a*exp(material%a*h)
	else where
		rout = 1.0_dps
	end where

	end function f_hyd_dkr_h_pw_vec2

	!********************************************************************************************************************
	!	F: f_hyd_dk_h_PW_sca(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of permeability (scalar) over pressure head (scalar pressure)
	! with simplified power function:
	!		dK/dh = ksat·dKr/dh
	!********************************************************************************************************************

	pure function f_hyd_dk_h_pw_sca(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_pw_sca" :: f_hyd_dk_h_pw_sca
	!DEC$ endif

	real(kind=dps),intent(in)::h
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout

	rout = material%ksat*f_hyd_dkr_h_pw_sca(material,h)

	end function f_hyd_dk_h_pw_sca

	!********************************************************************************************************************
	!	F: f_hyd_dk_h_PW_vec(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Function that returns derivative of permeability (vector) over pressure head (vector pressure)
	! with simplified power function:
	!		dK/dh = ksat·dKr/dh
	!********************************************************************************************************************

	pure function f_hyd_dk_h_pw_vec(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_pw_vec" :: f_hyd_dk_h_pw_vec
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material(:)
	real(kind=dps)::rout(size(h))

	rout = material%ksat*f_hyd_dkr_h_pw_vec(material,h)

	end function f_hyd_dk_h_pw_vec

	!------------------

	pure function f_hyd_dk_h_pw_vec2(material,h) result(rout)
	!DEC$ if defined(_DLL)
	!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:"f_hyd_dk_h_pw_vec2" :: f_hyd_dk_h_pw_vec2
	!DEC$ endif

	real(kind=dps),intent(in)::h(:)
	type(ty_com_material),intent(in)::material
	real(kind=dps)::rout(size(h))

	rout = material%ksat*f_hyd_dkr_h_pw_vec2(material,h)

	end function f_hyd_dk_h_pw_vec2

	!********************************************************************************************************************
	! F: f_hyd_Cmax_bc(material,h)
	!--------------------------------------------------------------------------------------------------------------------
	! Return the maximum value of the water capacity, to apply on the L-method
	!********************************************************************************************************************

	pure function f_hyd_Cmax_pw(material) result(rout)

	type(ty_com_material),intent(in)::material
	real(kind=dpd)::rout,a,n,alpha,thetar,thetas
	n=material%n
	a=material%a
	thetar=material%thres
	thetas=material%thsat

	!tex:
	!$${C_{max}} = \frac{{\left( {\theta r - \theta s} \right)\lambda }}{{\psi b}}$$

	rout = a*(thetas-thetar)/n

	end function f_hyd_Cmax_pw
